#! /usr/bin/env ruby

require 'task_report'

def show_usage_message(additional_message = nil, exit_status = 0)
  if additional_message
    puts additional_message
    puts ''
  end

  puts \
"Use `task` as follows:

  `task start TASK-DESCRIPTION`
    - finds or creates a new gist for today
    - adds a new item with the provided TASK-DESCRIPTION

  `task stop`
    - stops time tracking the current task, if it exists

  `task continue [TASK-ID, TASK-DESCRIPTION]`
    - continues tracking the provided task, or latest task if none if provided

  `task current`
    - lists the currently ongoing task

  `task list`
    - Lists all of today's tasks

  `task summary [--gist, -g] [{--from, -f} YYYY-MM-DD {--until, -u} YYYY-MM-DD]`
    - prints a task summary to the command line
    - if the `--gist` or `-g` options are used, creates a markdown gist summary
      and prints the link to stdout
    - if `--from` and `--until` options are passed, then a gist will be made including any tracked time between the two dates

  `task delete {TASK-ID, TASK-DESCRIPTION, today, gist}`
    - deletes the provided task if it exists
    - if 'today' is passed, then all tasks in today's report will be deleted
    - if 'gist' is passed, then the whole report gist for today will be deleted

  `task note TASK_ID TASK_NOTE`
    - adds arbitrary note TASK_NOTE to task TASK_ID
    - these notes will be appear in summaries as line items (markdown supported)

  `task total`
    - displays the total tracked time for today

  `task help`
    - shows this message"

  exit exit_status
end

def parse_summary_args
  gist = from = to = nil

  ARGV.each_with_index do |arg, i|
    case arg
    when '--gist', '-g'
      gist = true
    when '--from', '-f'
      if ARGV[i+1] =~ /\d{4}-\d{2}-\d{2}/ # must be a date
        from = ARGV[i+1]
      else
        show_usage_message('summary date arguments must have the format: YYYY-MM-DD')
      end
    when '--until', '-u'
      if ARGV[i+1] =~ /\d{4}-\d{2}-\d{2}/ # must be a date
        to = ARGV[i+1]
      else
        show_usage_message('summary date arguments must have the format: YYYY-MM-DD')
      end
    end
  end

  [gist, from, to]
end

TaskReport.read_config

case ARGV[0]
when 'list'
  TaskReport.list
when 'start'
  TaskReport.start(ARGV[1])
when 'stop'
  TaskReport.stop
when 'continue'
  TaskReport.continue(ARGV[1])
when 'delete'
  TaskReport.delete(ARGV[1])
when 'current'
  TaskReport.current
when 'summary'
  TaskReport.summary(*parse_summary_args)
when 'note'
  TaskReport.note(ARGV[1], ARGV[2])
when 'total'
  TaskReport.total
else
  show_usage_message
end
