#! /usr/bin/env ruby

require 'byebug' # DELETE ME
require './lib/user.rb'
require './lib/gist.rb'
require './lib/task.rb'
require './lib/report.rb'
require './lib/task_api.rb'

def show_usage_message(exit_status = 0)
	puts "Use `task` as follows:\n\n"
	puts "\t`task start TASK-DESCRIPTION`"
	puts "\t\t- finds or create a new gist for today"
	puts "\t\t- adds a new item with the provided TASK-DESCRIPTION\n\n"
	puts "\t`task list`"
	puts "\t\t- Lists all of today's tasks\n\n"
	puts "\t`task stop`"
	puts "\t\t- stops time tracking the current task, if it exists\n\n"
	puts "\t`task continue [TASK-ID, TASK-DESCRIPTION]`"
	puts "\t\t- continues tracking the provided task, or latest task if none if provided\n\n"
	puts "\t`task delete {TASK-ID, TASK-DESCRIPTION, today, gist}`"
	puts "\t\t- deletes the provided task if it exists\n"
	puts "\t\t- if 'today' is passed, then all tasks in today's report will be deleted\n"
	puts "\t\t- if 'gist' is passed, then the whole report gist for today will be deleted\n\n"
	puts "\t`task help`"
	puts "\t\t- shows this message"

	exit exit_status
end

User.name = 'mpataki' # TODO: pull this from a config (maybe even .git_config ?)
User.api_token = File.read('gist_token').strip

begin
	case ARGV[0]
	when 'list'
		TaskAPI.list
	when 'start'
		TaskAPI.start(ARGV[1])
	when 'stop'
		TaskAPI.stop
	when 'continue'
		TaskAPI.continue(ARGV[1])
	when 'delete'
		TaskAPI.delete(ARGV[1])
	# when 'info'
	# when 'summary'
	else
		show_usage_message
	end
rescue Report::TaskAlreadyTracked
	puts "Task '#{ARGV[0]}' is already being tracked. Continuing the task."
	ARGV[0] = 'continue'
	retry
end
